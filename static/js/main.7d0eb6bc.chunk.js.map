{"version":3,"sources":["components/SnakeHeader/SnakeHeader.js","components/ScoreBoard/ScoreBoard.js","components/BoardCell/BoardCell.js","components/GameBoard/GameBoard.js","classes/LinkedList.js","classes/Queue.js","App.js","reportWebVitals.js","index.js"],"names":["SnakeHeader","className","ScoreBoard","props","currentScore","bestScore","BoardCell","cell","cellType","foodClass","GameBoard","board","boardWidth","boardHeight","snake","foodCoordinate","i","row","j","isHead","push","isOn","Snake","this","head","tail","size","coordinates","skipHead","current","next","tailDirection","direction","newTailCoordinates","add","Body","body","TurningPoint","nextDirection","App","foodClasses","turningPoints","snakeDelay","allowSwipe","mode","eatAudio","Audio","gameOverAudio","state","gameOverMsg","getRandomInt","length","gameOverDisplay","gameMenuDisplay","updateSnakeState","bind","onSwipeMove","keyListner","startGame","gameOver","endGame","load","document","addEventListener","removeEventListener","event","keyCode","tempSnake","turningPoint","setState","getBestScore","intervalId","window","setInterval","currentBodyPiece","some","x","filter","shift","newScore","newFoodX","newFoodY","eat","play","clearInterval","localStorage","setItem","getItem","parseInt","min","max","Math","ceil","floor","random","position","y","abs","onTouchStart","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d0eb6bc.chunk.js","sourcesContent":["import \"../../App.css\";\r\nimport \"../../utils.css\";\r\n\r\nfunction SnakeHeader() {\r\n    return (\r\n        <div className=\"flex\">\r\n            <div className=\"title\">SNAKE</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SnakeHeader;\r\n","import \"../../App.css\";\r\nimport \"../../utils.css\";\r\n\r\nconst ScoreBoard = (props) => {\r\n    return (\r\n        <div className=\"flex flex-col\">\r\n            <div className=\"score\">{props.currentScore}</div>\r\n            <div className=\"best-score\">\r\n                <span className=\"subTitle\">{\"best:\"}&nbsp;</span>\r\n                {props.bestScore}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScoreBoard;\r\n","import \"../../App.css\";\r\nimport \"../../utils.css\";\r\n\r\nconst BoardCell = (props) => {\r\n    let cellType = props.cellType;\r\n    let cell;\r\n\r\n    switch (cellType) {\r\n        case \"none\":\r\n            cell = <div></div>;\r\n            break;\r\n        case \"head\":\r\n            cell = <div className=\"snake-head\"></div>;\r\n            break;\r\n        case \"body\":\r\n            cell = <div className=\"snake-body\"></div>;\r\n            break;\r\n        case \"food\":\r\n            cell = <div className={\"snake-food \" + props.foodClass}></div>;\r\n            break;\r\n        default:\r\n            cell = <div></div>;\r\n            break;\r\n    }\r\n\r\n    return <div className=\"board-cell flex-center\">{cell}</div>;\r\n};\r\n\r\nexport default BoardCell;\r\n","import \"../../App.css\";\r\nimport \"../../utils.css\";\r\nimport BoardCell from \"../BoardCell/BoardCell\";\r\nimport { React } from \"react\";\r\n\r\nconst GameBoard = (props) => {\r\n    let board = [];\r\n    let boardWidth = props.boardWidth;\r\n    let boardHeight = props.boardHeight;\r\n\r\n    let snake = props.snake;\r\n    let foodCoordinate = props.foodCoordinate;\r\n\r\n    for (let i = 0; i < boardHeight; i++) {\r\n        let row = [];\r\n\r\n        for (let j = 0; j < boardWidth; j++) {\r\n            if (snake.isHead([i, j])) row.push(<BoardCell cellType=\"head\" />);\r\n            else if (snake.isOn([i, j]))\r\n                row.push(<BoardCell cellType=\"body\" />);\r\n            else if (foodCoordinate[0] === i && foodCoordinate[1] === j)\r\n                row.push(\r\n                    <BoardCell foodClass={props.foodClass} cellType=\"food\" />\r\n                );\r\n            else row.push(<BoardCell cellType=\"none\" />);\r\n        }\r\n\r\n        board.push(row);\r\n    }\r\n    return (\r\n        <div className=\"flex\">\r\n            <div className=\"game-board\">{board}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameBoard;\r\n","export class Snake {\r\n    constructor() {\r\n        this.head = null;\r\n        this.tail = true;\r\n        this.size = 0;\r\n    }\r\n\r\n    isHead(coordinates) {\r\n        return (\r\n            this.head.coordinates[0] === coordinates[0] &&\r\n            this.head.coordinates[1] === coordinates[1]\r\n        );\r\n    }\r\n\r\n    isOn(coordinates, skipHead) {\r\n        if (this.head == null) return false;\r\n\r\n        var current = skipHead ? this.head.next: this.head;\r\n\r\n        while (current) {\r\n            if (\r\n                current.coordinates[0] === coordinates[0] &&\r\n                current.coordinates[1] === coordinates[1]\r\n            )\r\n                return true;\r\n\r\n            current = current.next;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    eat() {\r\n        let current = this.head;\r\n\r\n        while (current.next) current = current.next;\r\n\r\n        let tailDirection = current.direction;\r\n        let newTailCoordinates = \"R\";\r\n\r\n        switch(tailDirection) {\r\n            case \"T\":\r\n                newTailCoordinates = [current.coordinates[0] + 1, current.coordinates[1]];\r\n                break;\r\n\r\n            case \"R\":\r\n                newTailCoordinates = [current.coordinates[0], current.coordinates[1] - 1];\r\n                break;\r\n\r\n            case \"B\":\r\n                newTailCoordinates = [current.coordinates[0] - 1, current.coordinates[1]];\r\n                break;\r\n\r\n            case \"L\":\r\n                newTailCoordinates = [current.coordinates[0], current.coordinates[1] + 1];\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.add(new Body(newTailCoordinates, tailDirection));\r\n    }\r\n\r\n    add(body) {\r\n        var current;\r\n        body.tail = true;\r\n\r\n        if (this.head == null) this.head = body;\r\n        else {\r\n            current = this.head;\r\n\r\n            while (current.next) current = current.next;\r\n            current.tail = false;\r\n\r\n            current.next = body;\r\n        }\r\n        this.size++;\r\n    }\r\n\r\n    clear(body) {\r\n        this.head = null;\r\n        this.size = 0;\r\n    }\r\n}\r\n\r\nexport class Body {\r\n    constructor(coordinates, direction) {\r\n        this.coordinates = coordinates;\r\n        this.direction = direction;\r\n        this.next = null;\r\n    }\r\n}\r\n","export class TurningPoint {\r\n    constructor(coordinates, nextDirection) {\r\n        this.coordinates = coordinates;\r\n        this.nextDirection = nextDirection;\r\n    }\r\n}\r\n","import SnakeHeader from \"./components/SnakeHeader/SnakeHeader\";\nimport ScoreBoard from \"./components/ScoreBoard/ScoreBoard\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport { Body, Snake } from \"./classes/LinkedList\";\nimport { TurningPoint } from \"./classes/Queue\";\nimport Swipe from \"react-easy-swipe\";\n\nimport React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport \"./utils.css\";\n\nclass App extends Component\n{\n    constructor()\n    {\n        super();\n\n        this.foodClasses = [\n            \"blueberry\",\n            \"cherry\",\n            \"grapes\",\n            \"raspberry\",\n            \"strawberry\",\n        ];\n        this.turningPoints = [];\n        this.boardWidth = 20;\n        this.boardHeight = 15;\n        this.snakeDelay = 100;\n        this.allowSwipe = true;\n        this.mode = 'easy'\n\n        this.eatAudio = new Audio(\n            \"https://github.com/diozz/snake-react-js/raw/main/src/sounds/eat.mp3\"\n        );\n        this.gameOverAudio = new Audio(\n            \"https://github.com/diozz/snake-react-js/raw/main/src/sounds/game-over.mp3\"\n        );\n\n        let snake = new Snake();\n\n        snake.add(new Body([1, 3], \"R\"));\n        snake.add(new Body([1, 2], \"R\"));\n        snake.add(new Body([1, 1], \"R\"));\n\n        this.state = {\n            currentScore: 0,\n            bestScore: '--',\n            gameOverMsg: \"\",\n            snake: snake,\n            foodCoordinate: [8, 18],\n            foodClass: this.foodClasses[\n                this.getRandomInt(0, this.foodClasses.length - 1)\n            ],\n            gameOverDisplay: false,\n            gameMenuDisplay: true,\n        };\n\n        this.updateSnakeState = this.updateSnakeState.bind(this);\n        this.onSwipeMove = this.onSwipeMove.bind(this);\n        this.keyListner = this.keyListner.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this.gameOver = this.gameOver.bind(this);\n        this.endGame = this.endGame.bind(this);\n    }\n\n    componentDidMount()\n    {\n        this.eatAudio.load();\n        this.gameOverAudio.load();\n\n        document.addEventListener(\"keydown\", this.keyListner, false);\n    }\n\n    componentWillUnmount()\n    {\n        document.removeEventListener(\"keydown\", this.keyListner, false);\n    }\n\n    keyListner(event)\n    {\n        if (this.state.gameMenuDisplay || this.state.gameOverDisplay) return;\n\n        let keyCode = event.keyCode;\n        let tempSnake = this.state.snake;\n\n        let turningPoint = new TurningPoint(null, null);\n\n        switch (keyCode)\n        {\n            case 38:\n                if (\n                    tempSnake.head.direction === \"T\" ||\n                    tempSnake.head.direction === \"B\"\n                )\n                    return;\n\n                turningPoint.nextDirection = \"T\";\n                turningPoint.coordinates = [...tempSnake.head.coordinates];\n                this.turningPoints.push(turningPoint);\n\n                this.setState({ snake: tempSnake });\n                break;\n\n            case 39:\n                if (\n                    tempSnake.head.direction === \"R\" ||\n                    tempSnake.head.direction === \"L\"\n                )\n                    return;\n\n                turningPoint.nextDirection = \"R\";\n                turningPoint.coordinates = [...tempSnake.head.coordinates];\n                this.turningPoints.push(turningPoint);\n\n                this.setState({ snake: tempSnake });\n                break;\n\n            case 40:\n                if (\n                    tempSnake.head.direction === \"B\" ||\n                    tempSnake.head.direction === \"T\"\n                )\n                    return;\n\n                turningPoint.nextDirection = \"B\";\n                turningPoint.coordinates = [...tempSnake.head.coordinates];\n                this.turningPoints.push(turningPoint);\n\n                this.setState({ snake: tempSnake });\n                break;\n\n            case 37:\n                if (\n                    tempSnake.head.direction === \"L\" ||\n                    tempSnake.head.direction === \"R\"\n                )\n                    return;\n\n                turningPoint.nextDirection = \"L\";\n                turningPoint.coordinates = [...tempSnake.head.coordinates];\n                this.turningPoints.push(turningPoint);\n\n                this.setState({ snake: tempSnake });\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    startGame(snakeDelay)\n    {\n        switch (snakeDelay)\n        {\n            case 75: this.mode = 'hard'; break;\n            case 120: this.mode = 'medium'; break;\n            case 200: this.mode = 'easy'; break;\n        }\n\n        this.snakeDelay = snakeDelay;\n        this.setState({ gameMenuDisplay: false, gameOverDisplay: false, bestScore: this.getBestScore(this.mode) });\n\n        this.intervalId = window.setInterval(\n            this.updateSnakeState,\n            this.snakeDelay\n        );\n    }\n\n    endGame()\n    {\n        let snake = new Snake();\n\n        snake.add(new Body([1, 3], \"R\"));\n        snake.add(new Body([1, 2], \"R\"));\n        snake.add(new Body([1, 1], \"R\"));\n\n        this.setState({\n            currentScore: 0,\n            snake: snake,\n            bestScore: '--',\n            foodCoordinate: [8, 18],\n            foodClass: this.foodClasses[\n                this.getRandomInt(0, this.foodClasses.length - 1)\n            ],\n            gameOverDisplay: false,\n            gameMenuDisplay: true,\n        });\n    }\n\n    updateSnakeState()\n    {\n        let tempSnake = this.state.snake;\n        let currentBodyPiece = tempSnake.head;\n\n        if (tempSnake.isOn(currentBodyPiece.coordinates, true))\n        {\n            this.gameOver();\n            return;\n        }\n\n        //gameOverDetection\n        switch (currentBodyPiece.direction)\n        {\n            case \"T\":\n                if (currentBodyPiece.coordinates[0] < 0)\n                {\n                    this.gameOver();\n                    return;\n                }\n                break;\n\n            case \"R\":\n                if (currentBodyPiece.coordinates[1] > this.boardWidth - 1)\n                {\n                    this.gameOver();\n                    return;\n                }\n                break;\n\n            case \"B\":\n                if (currentBodyPiece.coordinates[0] > this.boardHeight - 1)\n                {\n                    this.gameOver();\n                    return;\n                }\n                break;\n\n            case \"L\":\n                if (currentBodyPiece.coordinates[1] < 0)\n                {\n                    this.gameOver();\n                    return;\n                }\n                break;\n\n            default:\n                break;\n        }\n\n        //updateSnakePosition\n        while (currentBodyPiece)\n        {\n            if (\n                this.turningPoints.some(\n                    (x) =>\n                        x.coordinates[0] === currentBodyPiece.coordinates[0] &&\n                        x.coordinates[1] === currentBodyPiece.coordinates[1]\n                )\n            )\n            {\n                currentBodyPiece.direction = this.turningPoints.filter(\n                    (x) =>\n                        x.coordinates[0] === currentBodyPiece.coordinates[0] &&\n                        x.coordinates[1] === currentBodyPiece.coordinates[1]\n                )[0].nextDirection;\n\n                if (currentBodyPiece.tail) this.turningPoints.shift();\n            }\n\n            switch (currentBodyPiece.direction)\n            {\n                case \"T\":\n                    currentBodyPiece.coordinates[0]--;\n                    break;\n\n                case \"R\":\n                    currentBodyPiece.coordinates[1]++;\n                    break;\n\n                case \"B\":\n                    currentBodyPiece.coordinates[0]++;\n                    break;\n\n                case \"L\":\n                    currentBodyPiece.coordinates[1]--;\n                    break;\n\n                default:\n                    break;\n            }\n\n            currentBodyPiece = currentBodyPiece.next;\n        }\n\n        //Ate.\n        if (\n            tempSnake.head.coordinates[0] === this.state.foodCoordinate[0] &&\n            tempSnake.head.coordinates[1] === this.state.foodCoordinate[1]\n        )\n        {\n            let newScore = this.state.currentScore + 5;\n            let newFoodX = 0;\n            let newFoodY = 0;\n\n            while (true)\n            {\n                newFoodY = this.getRandomInt(0, this.boardHeight - 1);\n                newFoodX = this.getRandomInt(0, this.boardWidth - 1);\n\n                if (\n                    newFoodY === this.state.foodCoordinate[0] &&\n                    newFoodX === this.state.foodCoordinate[1]\n                )\n                    continue;\n\n                if (tempSnake.isOn([newFoodY, newFoodX])) continue;\n\n                break;\n            }\n\n            tempSnake.eat();\n            this.eatAudio.play();\n\n            this.setState({\n                snake: tempSnake,\n                currentScore: newScore,\n                foodCoordinate: [newFoodY, newFoodX],\n                foodClass: this.foodClasses[\n                    this.getRandomInt(0, this.foodClasses.length - 1)\n                ],\n            });\n        } else\n        {\n            this.setState({ snake: tempSnake });\n        }\n    }\n\n    gameOver()\n    {\n        this.gameOverAudio.play();\n\n        clearInterval(this.intervalId);\n        this.turningPoints = [];\n        let gameOverMsg = 'GAME OVER!';\n        let bestScore = this.getBestScore(this.mode);\n        if (this.state.currentScore > bestScore)\n        {\n            localStorage.setItem(this.mode + \"BestScore\", this.state.currentScore);\n            bestScore = this.state.currentScore;\n            gameOverMsg = \"NEW BEST!\";\n        }\n\n        this.setState({\n            gameOverDisplay: true,\n            bestScore: bestScore,\n            gameOverMsg: gameOverMsg,\n        });\n    }\n\n    getBestScore(mode)\n    {\n        let bestScore = localStorage.getItem(mode + \"BestScore\");\n        bestScore = bestScore === null ? 0 : parseInt(bestScore);\n        return bestScore;\n    }\n\n    getRandomInt(min, max)\n    {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    onSwipeMove(position, event)\n    {\n        if (this.state.gameMenuDisplay || this.state.gameOverDisplay) return;\n\n        let tolerance = 2;\n        let x = position.x;\n        let y = position.y;\n\n        if (this.allowSwipe)\n        {\n            if (Math.abs(x) > tolerance || Math.abs(y) > tolerance)\n            {\n                this.allowSwipe = false;\n                if (Math.abs(y) > Math.abs(x))\n                    this.keyListner({ keyCode: y > 0 ? 40 : 38 });\n                else\n                    this.keyListner({ keyCode: x > 0 ? 39 : 37 });\n            }\n        }\n    }\n\n    render()\n    {\n        return (\n            <div\n                className=\"app-bg\"\n                onTouchStart={() =>\n                {\n                    this.allowSwipe = true;\n                }}\n            >\n                <Swipe\n                    className=\"full-height flex flex-center\"\n                    onSwipeMove={this.onSwipeMove}\n                >\n                    <div className=\"container\">\n                        <div className=\"flex\">\n                            <div className=\"titleContainer\">\n                                <div className=\"border\">\n                                    <SnakeHeader />\n                                </div>\n                            </div>\n                            <div className=\"scoreContainer\">\n                                <div className=\"border\">\n                                    <ScoreBoard\n                                        bestScore={this.state.bestScore}\n                                        currentScore={this.state.currentScore}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"border mt-2\">\n                            <GameBoard\n                                getRandomInt={this.getRandomInt}\n                                boardWidth={this.boardWidth}\n                                boardHeight={this.boardHeight}\n                                snake={this.state.snake}\n                                currentScore={this.state.currentScore}\n                                foodCoordinate={this.state.foodCoordinate}\n                                foodClass={this.state.foodClass}\n                                gameOverDisplay={this.state.gameOverDisplay}\n                            />\n                        </div>\n\n                        {this.state.gameMenuDisplay && (\n                            <div className=\"border menu-overlay mt-2\">\n                                <div className=\"flex flex-center\">\n                                    <div className=\"snake-food snake menu-food mr-4\"></div>\n                                    <div className=\"game-over-text\">MENU</div>\n                                    <div className=\"snake-food snake invert menu-food ml-4\"></div>\n                                </div>\n                                <div className=\"flex mt-2\">\n                                    <span\n                                        onClick={this.startGame.bind(this, 200)}\n                                        className=\"snakeButton mr-1\"\n                                    >\n                                        EASY\n                                    </span>\n                                    <span\n                                        onClick={this.startGame.bind(this, 120)}\n                                        className=\"snakeButton mr-1 ml-1\"\n                                    >\n                                        MEDIUM\n                                    </span>\n                                    <span\n                                        onClick={this.startGame.bind(this, 75)}\n                                        className=\"snakeButton ml-1\"\n                                    >\n                                        HARD\n                                    </span>\n                                </div>\n                            </div>\n                        )}\n\n                        {this.state.gameOverDisplay && (\n                            <div className=\"border gameover-overlay mt-2\">\n                                <div className=\"game-over-text\">\n                                    {this.state.gameOverMsg}\n                                </div>\n                                <div className=\"flex mt-2\">\n                                    <span\n                                        onClick={this.endGame}\n                                        className=\"snakeButton mr-1 ml-1\"\n                                    >\n                                        RESTART\n                                    </span>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </Swipe>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}